package org.erau.icarus.detect.Services.BNPDId;

import org.erau.icarus.detect.ES.Model.DroneInfo;
import org.erau.icarus.detect.ES.Model.Identification;
import org.erau.icarus.detect.ES.Service.DroneStorageService;
import org.erau.icarus.detect.Services.DroneId.DroneIdService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;

@Service
public class BNPDIdService {

    private DroneStorageService droneStorageService;

    private DroneIdService droneIdService;

    //This will be removed when switching to AI
    private Random rand;

    @Autowired
    public BNPDIdService(DroneStorageService droneStorageService, DroneIdService droneIdService) {
        this.droneStorageService = droneStorageService;
        this.droneIdService = droneIdService;
        //This will be removed when switching to AI
        this.rand = new Random();
    }

    public DroneInfo input(DroneInfo drone) throws IOException {
        //Creates a DroneInfo called toReturn
        DroneInfo toReturn;
        //Creates an ArrayList of Identification objects named identifications
        ArrayList<Identification> identifications = new ArrayList<>();
        //Creates an Identifcation Object named filler
        Identification filler = new Identification();
        //Creates an ArrayList of floats named scores
        ArrayList<Float> scores = new ArrayList<>();
        //Calls the setIdType function from Identification Model and sets it to BNPDId
        filler.setIdType("BNPDId");

        //This will be removed when switching to AI
        //Creates random floats to emulate AI scoring
        for (int i = 0; i < 4; i++) {
            float tempScore = scoreGenerator();
            scores.add(tempScore);
        }
        //Calls setScore function from Identification Model
        filler.setScore(scores);
        //Calls local function compareScores and passes it the filler Identification Object
        compareScores(filler);
        //Uses the ArrayList add function to add the identification object "filler" to the identifications ArrayList
        identifications.add(filler);
        //Calls the setIdentifications function from the DroneInfo Object
        drone.setIdentifications(identifications);
        //Checks the filler object to see what its potentialID is and whether it needs human Review
        //If it is a Drone ID and does not need humanReview it sets toReturn equal to 
        //the result from the droneIdService input function
        //
        //else
        //toReturn is set to droneStorageService save function
        if(!filler.isHumanReviewNeeded() && filler.getPotentialID().equalsIgnoreCase("D")){
            //Calls droneIdService input function used the drone Object as its input. 
            //Sets toReturn to the result of that function
            toReturn = droneIdService.input(drone);
        }
        else{
           //Calls the save function in droneStorageService using the drone object as its input.
           //Sets toReturn to the result of that function 
           toReturn = droneStorageService.save(drone);
        }

        return toReturn;
    }

    //This will be removed when switching to AI
    //Sets a seed for testing the random numbers
    public void setRandSeed(long seed) {
        rand = new Random(seed);
    }

    //Function to compare the scores generated by the A.I.
    private void compareScores(Identification src) {
        float max;
        //Creates a HashMap with integers and floats named goodScores.
        //This HashMap stores scores that are determined positive using the integer as a position reference
        HashMap<Integer, Float> goodScores = new HashMap<>();
        //Creates an ArrayList of floats named scores that retrieves the values to fill with from the scores ArrayList in identifications model
        ArrayList<Float> scores = src.getScore();
        //Sets float max to the first element in the scores ArrayList
        max = scores.get(0);

        //Compares scores in scores ArrayList to and determines if they are within the frame of
        //positive scores(greater than .85)
        for (int i = 0; i < 4; i++) {
            //Sets the currentScore to the score at point i in the scores ArrayList
            float currentScore = scores.get(i);
            //Determines if a new max score needs to be set
            if (max <= currentScore) {
                max = currentScore;
            }
            //Checks the currentScore if it is a positive ID score.
            //If it is it stores the i value and the currentScore value into the goodScores HashMap
            if (currentScore > .85) {
                goodScores.put(i, currentScore);
            }
        }

        //if the number of elements added to the goodScores HashMap is equal to 1
        //{Body Start}
        //Determines the potentialID that should be set for the Identifications object
        // index(0) = B
        // index(1) = N
        // index(2) = P
        // index(3) = D
        //{Body End}
        //else the picture is set for humanReviewNeeded since the object could not be positivly Identified
        if (goodScores.size() == 1) {
            if (scores.indexOf(max) == 0)
                src.setPotentialID("B");
            else if (scores.indexOf(max) == 1)
                src.setPotentialID("N");
            else if (scores.indexOf(max) == 2)
                src.setPotentialID("P");
            else if (scores.indexOf(max) == 3)
                src.setPotentialID("D");
        }
        else {
            src.setHumanReviewNeeded(true);
        }
    }

    private float scoreGenerator() {
        return rand.nextFloat();
    }
}
